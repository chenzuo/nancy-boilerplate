<?xml version="1.0"?>
<!DOCTYPE project>
<project name="NancyBoilerplate" default="build" basedir="../">

    <!--
        Gives access to environment variables.
    -->
    <property environment="ENV" />

    <!--
        Loads the project specific configuration values.
    -->
    <property file="${basedir}/build/config/project.properties" />

    <!--
        Loads the version of the last build.
    -->
    <property file="${basedir}/LASTBUILD" />

    <!--
        Load in Ant-Contrib to give us access to some very useful tasks!
        Learn more about Ant-Contrib and the extra functionality it offers from
        the link below.

        - http://ant-contrib.sourceforge.net/
    -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${tool.antcontrib}" />
        </classpath>
    </taskdef>

    <!--
        Load in ant-dotnet to allow us to run NAnt build scripts.
    -->
    <taskdef resource="org/apache/ant/dotnet/antlib.xml">
        <classpath>
            <pathelement location="${tool.antdotnet}" />
        </classpath>
    </taskdef>

    <!--
        Default target that builds the application ending with the project ready
        to be distributed.
    -->
    <target name="build" depends="-clean, -prepare, -version, -dependencies, -copy, -config, -compile, -tests, -compile-release, -frontend, -publish, -tidy" />

    <!--
        Removes any previous artefacts from previous build attempts.
    -->
    <target name="-clean">
        <delete dir="${dist.dir}" />
        <delete dir="${intermediate.dir}" />
    </target>

    <!--
        Create any directories needed during the build task.
    -->
    <target name="-prepare">
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${intermediate.dir}" />
    </target>

    <target name="-version">
        <!--
            If the last build version doesn't match the current project version
            properties then the build number needs to be reset to 0. This is done
            by deleting the buildnumber file thus reseting the build.number property
            back to 0.
        -->
        <if>
            <equals arg1="${build.last}" arg2="${project.major.version}.${project.minor.version}" />
            <then></then>
            <else>
                <delete file="${basedir}/BUILDNUMBER" />
            </else>
        </if>

        <buildnumber file="BUILDNUMBER" />
        <property name="project.version" value="${project.major.version}.${project.minor.version}.${build.number}" />
        <echo>Building v${project.version}</echo>
    </target>

    <!--
        Fetches front end dependencies from NPM.
        http://npmjs.org
    -->
    <target name="-dependencies">
        <exec executable="cmd" dir="${src.dir}/${project.name}" failonerror="true">
            <arg value="/c"/>
            <arg value="npm install"/>
        </exec>
    </target>

    <!--
        Files are copied from the src directory into an intermediate directory.
        This ensures that the src files are not manipulated in a way that would
        cause them to change and potentially break the product.

        Also by copying the files into a middle man directory any changes made
        doesn't trigger a change that would be picked up by any version control
        solutions that might be running.

        The intermediate directory should be ignored by any version control solutions.
    -->
    <target name="-copy">
        <copy todir="${intermediate.dir}">
            <fileset dir="${src.dir}">
                <exclude name="**/obj/**" />
                <exclude name="**/${project.name}/bin/**" />
                <exclude name="**/bin/Debug/**" />
                <exclude name="**/bin/Release/**" />
                <exclude name="**/.sass-cache/**" />
                <exclude name="**/*.css" />
            </fileset>
        </copy>
    </target>

    <!--
        Makes any amendments to source files that require changes for the production
        environment, e.g. applying of version numbers.
    -->
    <target name="-config">
        <replace file="${intermediate.dir}/${project.name}/package.json" token='&quot;version&quot;: &quot;0.0.0&quot;' value='&quot;version&quot;: &quot;${project.version}&quot;' />

        <!--
            Swap Web.config used for serving configuration files to one that has
            an aggressive caching strategy.
        -->
        <copy file="${build.dir}/server-configs/StaticFiles.Web.config" tofile="${intermediate.dir}/${project.name}/assets/Web.config" overwrite="true" />
    </target>

    <!--
        Compiles the solution to ensure there are no errors before we continue
        any further. Any errors will cause the build to fail.
    -->
    <target name="-compile">
        <nant buildfile="${nant.buildfile}">
            <target name="compile" />
        </nant>
    </target>

    <!--
        Runs all the tests for the project.
    -->
    <target name="-tests">
        <nant buildfile="${nant.buildfile}">
            <target name="tests" />
        </nant>
    </target>

    <!--
        Compiles a release version of the solution, means all the debug information
        will be removed.
    -->
    <target name="-compile-release">
        <nant buildfile="${nant.buildfile}">
            <target name="compile-release" />
        </nant>
    </target>

    <!--
        Fetches dependencies for the front end build process via Grunt. Once the
        dependencies have been fetched, the Grunt script is run.
    -->
    <target name="-frontend">
        <!--
            Runs the `dist` task in the Grunt file which handles validation and
            organising assets optimizing for a production environment.
        -->
        <exec executable="cmd" dir="${intermediate.dir}/${project.name}" failonerror="true">
            <arg value="/c"/>
            <arg value="grunt.cmd dist"/>
        </exec>
    </target>

    <!--
        Publishes the intermediate project into a files ready to be deployed as
        a website.
    -->
    <target name="-publish">
        <!--
            Copies all the required files to the publish directory.
        -->
        <copy todir="${publish.dir}">
            <fileset dir="${intermediate.dir}/${project.name}">
                <exclude name="/obj/**" />
                <exclude name="packages.config" />
                <exclude name="*.csproj.user" />
                <exclude name="*.csproj" />
                <exclude name="**/*.cs" />
                <exclude name="**/*.pdb" />
                <exclude name="/node_modules/**" />
                <exclude name="/.sass-cache/**" />
                <exclude name="package.json" />
                <exclude name="gruntfile.js" />
                <exclude name="**/*.scss" />
                <exclude name="**/*.js" />
                <exclude name=".jshintrc" />
            </fileset>
        </copy>

        <!--
            Separate from the copy target above due to the exclusion of js files
            preventing the distributable from being copied across.
        -->
        <copy todir="${publish.dir}">
            <fileset dir="${intermediate.dir}/${project.name}">
                <include name="**/*js-*.js" />
            </fileset>
        </copy>

        <!-- removes any empty directories. -->
        <delete includeemptydirs="true">
            <fileset dir="${publish.dir}">
                <and>
                    <size value="0"/>
                    <type type="dir"/>
                </and>
            </fileset>
        </delete>

        <zip destfile="${dist.dir}/site-${project.version}.zip" basedir="${publish.dir}" />

        <echo file="${dist.dir}/VERSION">project.version=${project.version}</echo>
    </target>

    <!--
        Removes the directories and files that are no longer required.
    -->
    <target name="-tidy">
        <delete dir="${intermediate.dir}" failonerror="false" />
        <delete dir="${publish.dir}" failonerror="false" />

        <!--
            Saves the build version number so it can be compared in future build
            processes to see if the build number for the version number needs to
            be reset back to 0.
        -->
        <echo file="LASTBUILD">build.last=${project.major.version}.${project.minor.version}</echo>
    </target>
</project>
